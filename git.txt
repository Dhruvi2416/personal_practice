Git is a distributed version control System.
Version control system allows software developers to work together along with their histories of work being maintained.
It does not allow overwriting each other's changes and also maintains history of every version.
DVCS clients not only checks the latest changes but also maintains history of the repository. If server goes down then repo from any client can be copied back to the server to restore it.
You can commit changes, create new branch view logs and perform other operations even while remaining offline. 
The only time you require connection is while publishing your changes.


stash:
A place to hide modifications while you work on something else.
(ekle ke kaik add karyu modify karyu ne commit karta pehela tamare kaik biju modify karvu pade em hoi to pehela
aa add files ke modified files ne stash kari lo ne pachi biji branch ma changes hoi ke kai bi biju)

      git stash push: Saves your local modifications in a new stash
	  git stash pop: Apllies the changes from the latest stash and then remove the stash
	  git stash apply: Apllies the changes to the workspace, by default it is the latest stash
	  git stash list: List the stashes that you have
	  git stash show [<stash>] :Show the changes recorded in the stash as a diff between the stashed state and original parent. When no <stash> is given
	                                       shows the latest one.
      git stash drop [<stash>] : Remove a single stash from the stash list. If no <stash> is given removes the latest stash.
	  git stash clear: Removes all stashed states. And might be is impossible to recover all changes.
	  git stash branch <branchname> [<stash>]: Creates and checks new branch named <branchname> starting from the commit at which <stash> was originally created,
	  applies changes recorded to new working tree. With no any <stash> mentioned it will create a new stash and stashes all changes. This is heplful when git stash push has enough changes
	  done that a git stash apply gives merge conflicts. Since stash is applied on top of HEAD commit  at that time git stash will restore originally stashed state with no conflicts.
	  
	  
	  
	 
WORKSPACE:

git status: displays the changes between the commit of index file and current HEAD commit
            (for ex. after commiting if I again update working directory and do git status it will
            give the updates before commits. Index file is the file where all the changes are saved temporary after git add .
            
            
            
git diff: shows difference after updating working directory before git add .
	 
	 git diff <branch1>..<branch2> : shows difference between both branches
	 
git add . : adds changes to index file
git add <filename> : adds the particular file in index.

git rm <filename>: removes the file from working as well as index

if you want to gain back deleted file write git reset  and then git restore <filename>
reset pchi restore ekla mate bcoz aa reset kare che ne to index ma avi jase deleted files ke je ne 
pachu karvu hoi pan restore ekla mate ke index walu working directory ma pachu lavo

git mv <filename> <filename2> mv from one file to other (or folder)
 
 ex. git mv src/index.js public/try.js
 
 git commit commits all staged files
 
 git reset --hard  commit karya pela na badha j changes delete kari nakhse
 
 git switch branch switches branches
 
 git checkout -b : creates and switch different branch
 git merge <commit or branch> merges changes or branch into current branch
 git checrry-pick <commit> changes commits from different branch to another branch
 
 git revert: reverts all changes before commits this will not affect git stash
 git clone download git
 git pull <remote> fetches changes done in remote repo after clone
 git clean removes untracked files first try git clean --dry-run to check which files would be deleted
 
 
 git merge merges the commits of one branch to the current branch 
 here it create a new commit message and this will be attatched 
 
 
git rebase applies all commits as it is ahead of base branch and changes commit history

git commit is used to create a snapshot of staged changes along a timeline of a git projects history. 

git commit --ammend it will allow you to add changes to the old commits 
without creating a new commit. It also allows to edit message of previous commit. 